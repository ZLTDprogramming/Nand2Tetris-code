// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decides whether to take ALU output or the instruction
	Mux16(a=instruction, b=ALUo, sel=instruction[15], out=toAreg);
    //A Register
    Not(in=instruction[15], out=Ni);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=sign);
    Or(a=Ni, b=sign, out=ARegL);
    ARegister (in=toAreg,load=ARegL,out=outAreg, out[0..14]=addressM);
    //Seconed ALU input (y)
    Mux16(a=outAreg, b=inM, sel=instruction[12], out=SdALUIn);

    ALU(x=OutDReg, y=SdALUIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    zr=zr, ng=ng,
    out=outM, out=ALUo);

    //D Register
    DRegister(in=ALUo,load=instruction[4],out=OutDReg);

    //Write M
    Mux(a=false, b=instruction[3],sel=instruction[15], out=writeM);

    //pc counter
    //jump implementation
    //Not
    Not(in=ng, out=Ng);
    Not(in=zr, out=Zr);
    //And
    And(a=Ng, b=Zr, out=P);
    And(a=Ng, b=zr, out=Z);
    And(a=ng, b=Zr, out=N);
    //mux
    Mux(a=false, b=P, sel=instruction[0], out=fP);
    Mux(a=false, b=Z, sel=instruction[1], out=fZ);
    Mux(a=false, b=N, sel=instruction[2], out=fN);
    //or
    Or(a=fP, b=fZ, out=PZ);
    Or(a=PZ, b=fN, out=JOut);
    //confirmation from instruction
    And(a=JOut, b=instruction[15], out=FJO);

    //the pc
    PC (in=outAreg, load=FJO, inc=true, reset=reset, out[0..14]=pc);

}
